name: Build-Publish

on:
  push:
    paths: ['.env', 'Dockerfile', 'rootfs/**', 'patches/**']
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

# based on
# https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
jobs:
  build:
    strategy:
      matrix:
        runs-on: [buildjet-4vcpu-ubuntu-2204, buildjet-4vcpu-ubuntu-2204-arm]
        include:
          - runs-on: buildjet-4vcpu-ubuntu-2204
            platform: linux/amd64
          - runs-on: buildjet-4vcpu-ubuntu-2204-arm
            platform: linux/arm64
    runs-on: ${{ matrix.runs-on }}
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # https://github.com/docker/metadata-action
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      # https://github.com/docker/login-action
      - name: Login to Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short commit SHA
        run: echo "COMMIT=$(git rev-parse --short HEAD)" >>"$GITHUB_ENV"

      - name: Get environment from a file
        run: cat .env >>"$GITHUB_ENV"

      # https://github.com/docker/build-push-action
      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          provenance: false
          platforms: ${{ matrix.platform }}
          build-args: |
            BRANCH=${{ env.BRANCH }}
            VERSION=${{ env.VERSION }}
            COMMIT=${{ env.COMMIT }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_IMAGE }}:${{ env.BRANCH }}
          cache-to: type=inline
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          digest="${{ steps.build.outputs.digest }}"
          mkdir -p /tmp/digests
          touch "/tmp/digests/${digest#sha256:}"

      # https://github.com/actions/upload-artifact
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get environment from a file
        run: cat .env >>"$GITHUB_ENV"

      # https://github.com/docker/metadata-action
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}},priority=700
            # branch
            type=ref,event=branch
            # commit
            type=sha,prefix=

      # https://github.com/docker/login-action
      - name: Login to Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/actions/download-artifact
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<<"$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
